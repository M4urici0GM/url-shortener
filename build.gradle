plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'url-shortener'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:3.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.0.0'
    implementation 'org.springframework.security:spring-security-core:6.0.0'
    implementation 'org.springframework.security:spring-security-test:6.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.0'
    implementation 'org.springframework.data:spring-data-redis:3.0.0'

    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'com.auth0:java-jwt:4.2.1'
    implementation 'io.lettuce:lettuce-core:6.2.1.RELEASE'
    implementation 'dev.failsafe:failsafe:3.2.4'
    implementation 'org.projectlombok:lombok:1.18.24'
    implementation 'com.github.javafaker:javafaker:1.0.2'

    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.3.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'it.ozimov:embedded-redis:0.7.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    systemProperty('spring.profiles.active', 'test')

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}


jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        xml.outputLocation = file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [

                    ])
        })
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
